import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

''' Concating Datasets '''

years = range(1880, 2011)
pieces = []
columns = ['name', 'sex', 'births']

for year in years:
    path = 'yob%d.txt' % year
    frame = pd.read_csv(path, names = columns)

    frame['year'] = year
    pieces.append(frame)

    names = pd.concat(pieces, ignore_index=True)

total_births = names.pivot_table('births', index='year', columns='sex', aggfunc = sum)

def add_prop(group):
    births = group.births.astype(float)

    # adding prop column to group dataframe
    group['prop'] = births/births.sum()
    return group

# apply the function to the groupby dataframe
names = names.groupby(['year', 'sex']).apply(add_prop)

# sanity check on proportions
np.allclose(names.groupby(['year', 'sex']).prop.sum(), 1)

def get_top1000(group):
    return group.sort_values(by='births', ascending=False)[:1000]

grouped = names.groupby(['year', 'sex'])
top1000 = grouped.apply(get_top1000)


''' Analyzing Trends '''

boys = top1000[top1000.sex == 'M']
girls = top1000[top1000.sex == 'F']

total_births = top1000.pivot_table('births', index='year', columns='name', aggfunc=sum)

# plot
subset = total_births[['John', 'Harry', 'Mary', 'Marilyn']]
#subset.plot(subplots=True, fig=(12, 10), grid=False, title='Number of births per year')
#plt.show()


''' Proportion of names '''

table = top1000.pivot_table('prop', index='year', columns='sex', aggfunc= sum)
#table.plot(title = 'sum of table1000.prop by year and sex',
           #yticks = np.linspace(0,1.2, 13), xticks = range(1880, 2020, 10))
plt.show()


''' How many names are in the top 50%? '''

df = boys[boys.year == 2010]
prop_cumsum = df.sort_values(by='prop', ascending=False).prop.cumsum()
prop_cumsum.searchsorted(0.5) # don't forget to add one, it's 0-indexed

def get_quantile_count(group, q=0.5):
    group = group.sort_values(by='prop', ascending=False)
    return group.prop.cumsum().searchsorted(q) + 1

diversity = top1000.groupby(['year', 'sex']).apply(get_quantile_count)
diversity = diversity.unstack('sex')
#diversity.plot(title='Number of popular names in top 50%')


''' Last Letter Revolution '''

# extracting last letter from name column
get_last_letter = lambda x: x[-1]
last_letters = names.name.map(get_last_letter)
last_letters.name = 'last_letter'

table = names.pivot_table('births', index=last_letters, columns=['sex', 'year'],
                          aggfunc = sum)

subtable = table.reindex(columns=[1920, 1960, 2010], level='year')
# normalize by proportion of sum
letter_prop = subtable / subtable.sum().astype(float)

fig, axes = plt.subplots(2, 1, figsize=(10, 8))
letter_prop['M'].plot(kind='bar', rot=0, ax=axes[0], title='Male')
letter_prop['F'].plot(kind='bar', rot=0, ax=axes[1], title='Female', legend=False)
#plt.show()

letter_prop = table / table.sum().astype(float)
# transpose to make each column a time series
dny_ts = letter_prop.ix[['d', 'n', 'y'], 'M'].T
dny_ts.plot()
#plt.show()


''' Boy names that became girl names '''

all_names = top1000.name.unique()
mask = np.array(['lesl' in x.lower() for x in all_names])
lesley_like = all_names[mask]

filtered = top1000[top1000.name.isin(lesley_like)]
filtered.groupby('name').births.sum()

table = filtered.pivot_table('births', index='year', columns='sex', aggfunc=sum)
table = table.div(table.sum(1), axis=0)
table.plot(style={'M': 'k-', 'F':'k--'}) # different line styles
#plt.show()



