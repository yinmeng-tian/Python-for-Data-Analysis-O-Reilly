import gzip
import json
import numpy as np
import matplotlib.pyplot as plt

# 'r' gives string, but 'rb' gives byte object
# url: http://1usagov.measuredvoice.com/bitly_archive/usagov_bitly_data2013-05-17-1368832207.gz
# download gz file and save it in the same directory as python program

path = 'usagov_bitly_data2013-05-17-1368832207.gz'

records = [json.loads(line) for line in gzip.open(path, 'r')]

timezones = [rec['tz'] for rec in records if 'tz' in rec]


''' Finding most common timezones '''

from collections import Counter
counts = Counter(timezones)
#print(counts.most_common(10))


''' Counting timezones with pandas '''

from pandas import DataFrame, Series
import pandas as pd

frame = DataFrame(records)
#print(frame)
tz_counts = frame['tz'].value_counts()
#print(tz_counts)
clean_tz = frame['tz'].fillna('Missing')
''' Filtering '''
clean_tz[clean_tz == ''] = 'Unknown'
#print(clean_tz.value_counts())


''' Plotting '''

graph = tz_counts[:10].plot(kind='barh', rot=0)
plt.show()

# use only the first string
# the a field (frame.a) contains info about browser
results = Series([x.split()[0] for x in frame.a.dropna()])
#print(results)


''' Separate Dataset into Windows vs Non-Windows '''

cframe = frame[frame.a.notnull()]
operating_sys = np.where(cframe['a'].str.contains('Windows'), 'Windows', 'Not Windows')

by_tz_os = cframe.groupby(['tz', operating_sys])
# size is similar to value_counts()
agg_counts = by_tz_os.size().unstack().fillna(0)

# sort in ascending order
indexer = agg_counts.sum(1).argsort()
count_subset = agg_counts.take(indexer)[-10:]
count_subset.plot(kind='barh', stacked=True)
# normalize means sum is 1
normed_subset = count_subset.div(count_subset.sum(1), axis=0)


